ajax: asynchronous javascript and xml 异步的JS和XML
通过AJAX可以在浏览器中向服务器发送异步请求，

优势：无刷新获取数据，允许根据用户事件来更新部分页面内容

缺点：没有浏览历史，不能回退。存在跨域问题。爬虫不友好


2.http协议
hypertext transport protocol 协议【超文本传输协议】。
规定了浏览器和万维网服务器之间相互通信的规则


##请求报文

行   请求方式（POST/GET） ;  请求的url ; HTTP/1.1  版本
头   	Host：gg
		Cookie: name=gg
		Coenten-type: ..
		User-Agent: ...
空行
体	GET 请求体是空的 POST 可以不为空


## 响应报文 
 
行  HTTP/1.1 200 OK    ：HTTP版本 响应码 对应的响应字符串
头		Content-Type: text/html..

空行
体		  <html>
				。。。。
			</html>



3.express的简单使用
//1引入express
const express = require('express')

//2.创建应用对象
const app = express();

//创建路由规则
//request 是对请求报文的封装
//response 是对响应报文的封装
app.get('/',(request,response)=>{
	//设置响应
	response.send('wo cao ni ma');
});


//4.监听端口启动服务
app.listen(8000,()=>{
	console.log("服务器启动，用的8000端口");
})


4.JSON数据的获取
app.get('/server',(request,response)=>{

	response.setHeader('Access-Control-Allow-Origin','*')
	const msg = {'name':'nima','age':18}
	//设置响应
	response.send(JSON.stringify(msg)); //需要酱JSON转为字符串才能发送
});

getaj(){
	const xhr = new XMLHttpRequest();
	
	//方法二 把接受类型设置为json
	xhr.responseType = 'json';
	
	xhr.open('GET','http://127.0.0.1:8000/server')
	xhr.send()
  
	xhr.onreadystatechange = ()=>{
		if(xhr.readyState === 4){
			if(xhr.status >= 200 && xhr.status <300){
				// this.msg = xhr.response;
				//方法一手动转为JSON格式
				// let data = JSON.parse(xhr.response)
				this.msg = xhr.response.name
			}
		}
	}
}


5.node 服务端插件
npm install -g nodemon
可以不用自己重启
nodemon .\etest.js

6.IE浏览器缓存数据不刷新问题
xhr.open('GET','http://127.0.0.1:8000/server？t='+Date.now())
这样每次都是发送不同的请求 IE浏览器不会再去访问缓存


7.网络超时，异常处理  手动取消请求
xhr.timeout = 2000; 设置最大请求时间 当超过这个事件 触发回调函数ontimeout

xhr.ontimeout = ()=>{
	alert('请求超时')
}
xhr.onerror = ()=>{
	alert('网络异常')
}

8.手动取消请求
xhr.abort() 手动取消请求

if (fa) {
	如果正在发送 则 xhr.abort()  避免重复请求问题
}

if(xhr.readyState === 4)
{
	fa = false    状态为4时 发送已完成
}


9.response

then(response=>{

	response.status //响应状态码

	response.statusText 响应字符串

	response.headers 响应头信息

	response.date 响应体

})